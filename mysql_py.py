# -*- coding: utf-8 -*-
"""Mysql.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gy5hYexumx_X--sROORIUlnB6aJZEoDX

**Casestudy:1 Group by Transaction Type – Overall Category Trends**
"""

import pymysql
import pandas as pd

# Connect to MySQL
connection = pymysql.connect(
    host='localhost',
    user='root',
    password='12345',
    database='phonepay_db'
)
#Group by State and Quarter – Total Transaction Amount
query1 = """
    SELECT State,Year,Quarter,SUM(Transaction_amount) AS Total_Amount
    FROM agg_transaction
    GROUP BY State, Year, Quarter
    ORDER BY Total_Amount DESC
    LIMIT 10
"""
# Execute SQL query using pandas
df = pd.read_sql(query1, connection)
print("Quarter-wise Aggregated by State, Year, Quarter:")
print(df)

# Group by State and Year – Total Transactions
query2 = """
SELECT State, Year,
       SUM(Transaction_count) AS Yearly_Transactions,
       SUM(Transaction_amount) AS Yearly_Amount
FROM agg_transaction
WHERE Year = 2023
GROUP BY State, Year
ORDER BY State, Year
LIMIT 10
"""
df2 = pd.read_sql(query2, connection)
print("Year-wise Aggregated by State, Year:")
print(df2)

#  Group by Transaction Type – Overall Category Trends
query3 = """
SELECT Transaction_type, SUM(Transaction_count) AS Total_Transactions
FROM agg_transaction
WHERE Quarter = 1 AND Year = 2023
GROUP BY Transaction_type
ORDER BY Total_Transactions ASC
LIMIT 5
"""
df3 = pd.read_sql(query3, connection)
print("Overall Category Trends- Transaction Type:")
print(df3)

# Close the connection
connection.close()

"""**Casestudy:2**"""

#7. Transaction Analysis Across States and Districts

# 1. df1 - Top 10 States by Transaction Value
query1 = """
SELECT State,SUM(User_amount) AS Total_Amount,SUM(User_count) AS Total_Users
FROM map_transaction
GROUP BY State
ORDER BY Total_Amount DESC
LIMIT 10
"""
df1 = pd.read_sql(query1, connection)

# 2. df2 - Top 10 Districts by Transaction Volume
query2 = """
SELECT State,District,SUM(User_count) AS Total_Users,SUM(User_amount) AS Total_Amount
FROM map_transaction
GROUP BY State, District
ORDER BY Total_Users DESC
LIMIT 10
"""
df2 = pd.read_sql(query2, connection)

# 3. df3 - Quarterly Trend in High-performing States (User_amount > 10 million)
query3 = """
SELECT State,Year,Quarter,SUM(User_count) AS Total_Users,SUM(User_amount) AS Total_Amount
FROM map_transaction
GROUP BY State, Year, Quarter
HAVING SUM(User_amount) > 10000000
ORDER BY Total_Amount DESC
Limit 10
"""
df3 = pd.read_sql(query3, connection)

# 4. df4 - Districts with Low Transaction Activity (User_count < 1000)
query4 = """
SELECT State,District,SUM(User_count) AS Total_Users,SUM(User_amount) AS Total_Amount
FROM map_transaction
GROUP BY State, District
HAVING SUM(User_count) < 1000
ORDER BY Total_Users ASC
LIMIT 10
"""
df4 = pd.read_sql(query4, connection)

# 5. df5 - Year-over-Year Growth Trend by State
query5 = """
SELECT State,Year,SUM(User_count) AS Yearly_Users,SUM(User_amount) AS Yearly_Amount
FROM map_transaction
GROUP BY State, Year
ORDER BY State, Year
LIMIT 10
"""
df5 = pd.read_sql(query5, connection)

# Close the connection
connection.close()

# Optional: print sample results
print(" df1 - Top 10 States by Transaction Value:\n", df1.head())
print(" df2 - Top 10 Districts by Transaction Volume:\n", df2.head())
print(" df3 - Quarterly Trend in High-performing States:\n", df3.head())
print(" df4 - Districts with Low Transaction Activity:\n", df4.head())
print(" df5 - Year-over-Year Growth Trend:\n", df5.head())

"""**CaseStudy:3**"""

#9. Insurance Transactions Analysis
# 1. Top States by Insurance Transaction Amount
query1 = f"""
SELECT State,SUM(User_amount) AS Total_Amount,SUM(User_count) AS Total_Users
FROM map_insurance
WHERE Year = year AND Quarter = quarter
GROUP BY State
ORDER BY Total_Amount DESC
LIMIT 10
"""
df1 = pd.read_sql(query1, connection)

# 2. Top Districts by Insurance Transaction Volume
query2 = f"""
SELECT State,District,SUM(User_count) AS Total_Users,SUM(User_amount) AS Total_Amount
FROM map_insurance
WHERE Year = year AND Quarter = quarter
GROUP BY State, District
ORDER BY Total_Users DESC
LIMIT 10
"""
df2 = pd.read_sql(query2, connection)

# 3. Insurance Quarterly Trends by State
query3 = """
SELECT State,Year,Quarter,SUM(User_amount) AS Total_Amount,SUM(User_count) AS Total_Users
FROM map_insurance
GROUP BY State, Year, Quarter
ORDER BY State, Year, Quarter
LIMIT 10
"""
df3 = pd.read_sql(query3, connection)

# 4. Districts with Low Insurance Activity (Threshold < 1000 users)
query4 = f"""SELECT State,District, SUM(User_count) AS Total_Users,SUM(User_amount) AS Total_Amount
FROM map_insurance
WHERE Year = year AND Quarter = quarter
GROUP BY State, District
HAVING Total_Users < 1000
ORDER BY Total_Users ASC
LIMIT 10
"""
df4 = pd.read_sql(query4, connection)

# 5. Year-over-Year Insurance Growth by State
query5 = """
SELECT State,Year,SUM(User_count) AS Yearly_Users,SUM(User_amount) AS Yearly_Amount
FROM map_insurance
GROUP BY State, Year
ORDER BY State, Year
LIMIT 10
"""
df5 = pd.read_sql(query5, connection)

# === Close the Connection ===
connection.close()

# Print Results
print("\n Top 10 States by Insurance Transaction Amount:")
print(df1)

print("\n Top 10 Districts by Insurance Transaction Volume:")
print(df2)

"""**CaseStudy:4**"""

#2. Device Dominance and User Engagement Analysis

# 1. Query - Underutilized Brands
query1 = """
SELECT State, Brand_type, Registered_count, Percentage_Userdevices
FROM agg_user
WHERE Registered_count > 1000
AND Percentage_Userdevices < 0.1
ORDER BY Percentage_Userdevices ASC
LIMIT 10
"""
df = pd.read_sql(query1, connection)

# 2. Top 5 Device Brands by Registration in Each State

query2 = """
SELECT Year, Brand_type, SUM(Registered_count) AS Yearly_Registrations
FROM agg_user
GROUP BY Year, Brand_type
ORDER BY Year, Yearly_Registrations DESC
LIMIT 10
"""
df2 = pd.read_sql(query2, connection)

# 3. Trend by Year - Top Brands
query3 = """
SELECT
Year,
    Brand_type,
    SUM(Registered_count) AS Yearly_Registrations
FROM agg_user
GROUP BY Year, Brand_type
ORDER BY Year, Yearly_Registrations DESC
LIMIT 10
"""
df3 = pd.read_sql(query3, connection)

connection.close()

print("Underutilized Brands:\n", df)
print("Top 5 Device Brands by Registration in Each State:\n", df2)
print("Trend by Year - Top Brands:\n", df3)

"""**CaseStudy:5**"""

# 6.Analyze insurance-related transactions
# 1. df1 - Total Insurance Users and Amount by State
query1 = """
SELECT
    State,
    SUM(User_count) AS Total_Users,
    SUM(User_amount) AS Total_Amount
FROM map_transaction
GROUP BY State
ORDER BY Total_Amount DESC;"""
df1 = pd.read_sql(query1, connection)

# 2. df2 - Year-wise Insurance Uptake by State
query2 = """
SELECT
    State,
    Year,
    SUM(User_count) AS Yearly_Users,
    SUM(User_amount) AS Yearly_Amount
FROM map_transaction
GROUP BY State, Year
ORDER BY State, Year
LIMIT 10;
"""
df2 = pd.read_sql(query2, connection)

# 3. df3 - Quarterly Insurance Trend by State
query3 = """
SELECT
    State,
    Year,
    Quarter,
    SUM(User_count) AS Quarterly_Users,
    SUM(User_amount) AS Quarterly_Amount
FROM map_transaction
GROUP BY State, Year, Quarter
ORDER BY State, Year, Quarter
LIMIT 10;
"""
df3 = pd.read_sql(query3, connection)

# 4. df4 - District-wise Insurance Uptake for All States
query4 = """
SELECT
    State,
    District,
    SUM(User_count) AS Total_Users,
    SUM(User_amount) AS Total_Amount
FROM map_transaction
GROUP BY State, District
ORDER BY State, Total_Amount DESC
LIMIT 10;
"""
df4 = pd.read_sql(query4, connection)

# 5. df5 - Districts with Low Insurance Activity (User_count < 1000)
query5 = """
SELECT
    State,
    District,
    SUM(User_count) AS Total_Users,
    SUM(User_amount) AS Total_Amount
FROM map_transaction
GROUP BY State, District
HAVING SUM(User_count) < 10000
ORDER BY Total_Users ASC
LIMIT 10;
"""
df5 = pd.read_sql(query5, connection)

# Close the connection
connection.close()

# Print sample outputs
print(" df1 - Total by State:\n", df1.head())
print(" df2 - Year-wise by State:\n", df2.head())
print(" df3 - Quarter-wise by State:\n", df3.head())
print(" df4 - District-wise Details:\n", df4.head())
print(" df5 - Low Activity Districts:\n", df5.head())

"""**Phonepay DB**"""

import pymysql

# Step 1: Connect to MySQL Server
Connection = pymysql.connect(
    host='localhost',
    user='root',
    password='12345',
    database='Phonepay_DB'  # DB must already exist
)
print("Connected to MySQL")

# Step 2: Create Cursor
cursor = Connection.cursor()
print("Cursor created")

# Step 3: Function to Create Table
def create_table(cursor, table_name, table_definition):
    query = f"""CREATE TABLE IF NOT EXISTS {table_name} ({table_definition});"""
    print(f"Creating table: {table_name}")
    cursor.execute(query)
    Connection.commit()
    print(f"Table '{table_name}' created successfully!")

# Step 4: Table Definitions
Agg_Transaction_def = """
    State VARCHAR(100),
    Year INT,
    Quarter INT,
    Transaction_type VARCHAR(100),
    Transaction_count INT,
    Transaction_amount DOUBLE
"""

Agg_Insurance_def = """
    State VARCHAR(100),
    Year INT,
    Quarter INT,
    Transaction_type VARCHAR(100),
    Transaction_count INT,
    Transaction_amount DOUBLE
"""

Agg_User_def = """
    State VARCHAR(100),
    Year VARCHAR(100),
    Quarter INT,
    User_count INT,
    Brand_type VARCHAR(100),
    Registered_count INT,
    Percentage_Userdevices FLOAT
"""
Map_Insurance_def = """    State VARCHAR(100),
    Year INT,
    Quarter INT,
    District VARCHAR(100),
    User_count INT,
    User_amount DOUBLE
"""
Map_Transaction_def = """
    State VARCHAR(100),
    Year INT,
    Quarter INT,
    District VARCHAR(100),
    User_count INT,
    User_amount DOUBLE
"""
Map_User_def = """
    State VARCHAR(100),
    Year INT,
    Quarter INT,
    District VARCHAR(100),
    RegisteredUsers INT,
    AppOpens DOUBLE
"""

top_insurance_def = """
    State VARCHAR(100),
    Year INT,
    Quarter INT,
    Entity_Name VARCHAR(100),
    Transaction_Count INT,
    Transaction_Amount FLOAT
"""
top_transactions_def = """

    State VARCHAR(100),
    Year INT,
    Quarter INT,
    District_Name VARCHAR(100),
    District_Transactions INT,
    District_Amount FLOAT,
    Pincode VARCHAR(10),
    Pincode_Transactions INT,
    Pincode_Amount FLOAT
"""
top_users_def = """

    State VARCHAR(100),
    Year INT,
    Quarter INT,
    District_Name VARCHAR(100),
    District_RegisteredUsers FLOAT,
    Pincode VARCHAR(20),
    Pincode_RegisteredUsers INT

"""

# Step 5: Call table creation function with proper table name and definition
create_table(cursor, "Agg_Transaction", Agg_Transaction_def)
create_table(cursor, "Agg_Insurance", Agg_Insurance_def)
create_table(cursor, "Agg_User", Agg_User_def)
create_table(cursor, "Map_Insurance", Map_Insurance_def)
create_table(cursor, "Map_Transaction", Map_Transaction_def)
create_table(cursor, "Map_User", Map_User_def)
create_table(cursor, "top_insurance", top_insurance_def)
create_table(cursor, "top_transactions", top_transactions_def)
create_table(cursor, "top_users", top_users_def)


# Step 6: Close connection
cursor.close()
Connection.close()
print("Connection closed")

"""**Final Output**"""

import os
import json
import pandas as pd
import streamlit as st
import plotly.express as px
import requests
import pymysql

# --- Streamlit Page Config ---
st.set_page_config(page_title="📍 PhonePe Transactions - India Map", layout="wide")
st.title("📍 PhonePe Transactions - India Map")

# ==========================
# 1️⃣ Load and Process Data
# ==========================
path = r"C:\Users\DhivyaBharthi\Desktop\GUVI\Phonepay_Project\data\aggregated\transaction\country\india\state"

Agg_state_list = os.listdir(path)

Trans = {
    'State': [], 'Year': [], 'Quarter': [],
    'Transaction_type': [], 'Transaction_count': [], 'Transaction_amount': []
}

for i in Agg_state_list:
    p_i = os.path.join(path, i)
    if not os.path.isdir(p_i):
        continue

    Agg_yr = os.listdir(p_i)

    for j in Agg_yr:
        p_j = os.path.join(p_i, j)
        if not os.path.isdir(p_j):
            continue

        Agg_yr_list = os.listdir(p_j)

        for k in Agg_yr_list:
            p_k = os.path.join(p_j, k)
            if not os.path.isfile(p_k):
                continue

            with open(p_k, 'r') as Data:
                try:
                    D = json.load(Data)
                    if D.get('data') and isinstance(D['data'], dict) and 'transactionData' in D['data']:
                        for z in D['data']['transactionData']:
                            name = z['name']
                            count = z['paymentInstruments'][0]['count']
                            amount = z['paymentInstruments'][0]['amount']
                            Trans['Transaction_type'].append(name)
                            Trans['Transaction_count'].append(count)
                            Trans['Transaction_amount'].append(amount)
                            Trans['State'].append(i)
                            Trans['Year'].append(j)
                            Trans['Quarter'].append(int(k.strip('.json')))
                except Exception as e:
                    print(f"Error loading {p_k}: {e}")

Agg_Trans = pd.DataFrame(Trans)

# ==========================
# 2️⃣ State Name Formatting
# ==========================
# Match state names in GeoJSON
state_mapping = {
    'andaman-&-nicobar-islands': 'Andaman & Nicobar Island',
    'andhra-pradesh': 'Andhra Pradesh',
    'arunachal-pradesh': 'Arunanchal Pradesh',
    'assam': 'Assam',
    'bihar': 'Bihar',
    'chandigarh': 'Chandigarh',
    'chhattisgarh': 'Chhattisgarh',
    'dadra-&-nagar-haveli-&-daman-&-diu': 'Dadra & Nagar Haveli & Daman & Diu',
    'delhi': 'NCT of Delhi',
    'goa': 'Goa',
    'gujarat': 'Gujarat',
    'haryana': 'Haryana',
    'himachal-pradesh': 'Himachal Pradesh',
    'jammu-&-kashmir': 'Jammu & Kashmir',
    'jharkhand': 'Jharkhand',
    'karnataka': 'Karnataka',
    'kerala': 'Kerala',
    'ladakh': 'Ladakh',
    'lakshadweep': 'Lakshadweep',
    'madhya-pradesh': 'Madhya Pradesh',
    'maharashtra': 'Maharashtra',
    'manipur': 'Manipur',
    'meghalaya': 'Meghalaya',
    'mizoram': 'Mizoram',
    'nagaland': 'Nagaland',
    'odisha': 'Odisha',
    'puducherry': 'Puducherry',
    'punjab': 'Punjab',
    'rajasthan': 'Rajasthan',
    'sikkim': 'Sikkim',
    'tamil-nadu': 'Tamil Nadu',
    'telangana': 'Telangana',
    'tripura': 'Tripura',
    'uttar-pradesh': 'Uttar Pradesh',
    'uttarakhand': 'Uttarakhand',
    'west-bengal': 'West Bengal'
}

Agg_Trans['State'] = Agg_Trans['State'].map(state_mapping)

# ==========================
# 3️⃣ Aggregating Data for Map
# ==========================
# Example: Sum transaction amount for 2020 Q1
year = st.selectbox("Select Year", sorted(Agg_Trans["Year"].unique()))
quarter = st.selectbox("Select Quarter", sorted(Agg_Trans["Quarter"].unique()))

map_df = Agg_Trans[(Agg_Trans["Year"] == year) & (Agg_Trans["Quarter"] == quarter)]
map_df = map_df.groupby("State", as_index=False)["Transaction_amount"].sum()

# ==========================
# 4️⃣ Load GeoJSON
# ==========================
geojson_url = "https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson"
geojson_data = requests.get(geojson_url).json()

# ==========================
# 5️⃣ Plot Choropleth Map
# ==========================
fig = px.choropleth(
    map_df,
    geojson=geojson_data,
    featureidkey='properties.ST_NM',
    locations='State',
    color='Transaction_amount',
    color_continuous_scale='Viridis',
    title=f"Total Transaction Amount - {year} Q{quarter}"
)

fig.update_geos(fitbounds="locations", visible=False)
st.plotly_chart(fig, use_container_width=True)


#===========================================================

# ---------- DATABASE CONNECTION ----------
def get_connection():
    return pymysql.connect(
        host="localhost",
        user="root",
        password="12345",
        database="Phonepay_DB"
    )


# ---------- CONFIG ----------
st.set_page_config(page_title="📱 PhonePe Dashboard", layout="wide")
st.title("📱 PhonePe Dashboard")

# ---------- SIDEBAR NAVIGATION ----------
st.sidebar.title("📑 Navigation")
page = st.sidebar.radio(
    "Choose a Case Study and PhonePe India Map",
    [
        "Phonepe Map: India Top_Transactions",
        "Case Study 1: Aggregated Transactions",
        "Case Study 2: Insurance Transactions",
        "Case Study 3: State & District Analysis",
        "Case Study 4: Insurance Analysis",
        "Case Study 5: Device Usage & Engagement"
    ]
)

# ---------- PAGE 1: PHONEPE MAP ----------
if page == "Phonepe Map: India Top_Transactions":
    st.title("📍 PhonePe India Transaction Map")

    # Load GeoJSON
    geojson_url = "https://gist.githubusercontent.com/jbrobst/56c13bbbf9d97d187fea01ca62ea5112/raw/e388c4cae20aa53cb5090210a42ebb9b765c0a36/india_states.geojson"
    india_states_geojson = requests.get(geojson_url).json()

    # Query
    connection = get_connection()
    query = """
        SELECT State, SUM(District_Amount) AS Total_Amount
        FROM top_transactions
        GROUP BY State
    """
    df = pd.read_sql(query, connection)
    connection.close()

    df['State'] = df['State'].str.title()

    # Plot
    fig = px.choropleth(
        df,
        geojson=india_states_geojson,
        featureidkey='properties.ST_NM',
        locations='State',
        color='Total_Amount',
        color_continuous_scale='ice',
        title="📊 State-wise Transaction Amount"
    )
    fig.update_geos(fitbounds="locations", visible=False)
    st.plotly_chart(fig, use_container_width=True)

# ---------- PAGE 2: CASE STUDY 1 ----------
elif page == "Case Study 1: Aggregated Transactions":
    st.title("📊 PhonePe Transaction Case Study 1")

    # Filters
    st.sidebar.header("📅 Filter Options")
    years = list(range(2018, 2024))
    quarters = [1, 2, 3, 4]
    selected_year = st.sidebar.selectbox("Select Year", years)
    selected_quarter = st.sidebar.selectbox("Select Quarter", quarters)

    # Query
    connection = get_connection()
    query1 = f"""
        SELECT State, Year, Quarter, SUM(Transaction_amount) AS Total_Amount
        FROM agg_transaction
        WHERE Year = {selected_year} AND Quarter = {selected_quarter}
        GROUP BY State, Year, Quarter
        ORDER BY Total_Amount DESC
        LIMIT 10
    """
    df1 = pd.read_sql(query1, connection)
    connection.close()

    st.subheader("🔝 Top 10 States by Transaction Amount")
    st.dataframe(df1)
    st.bar_chart(df1.set_index("State")["Total_Amount"])

# ---------- PAGE 3: CASE STUDY 2 ----------
elif page == "Case Study 2: Insurance Transactions":
    st.title("💼 Case Study 2: Insurance Transactions")

    # Filters
    st.sidebar.header("📅 Filter Options")
    years = list(range(2018, 2024))
    quarters = [1, 2, 3, 4]
    selected_year = st.sidebar.selectbox("Select Year", years)
    selected_quarter = st.sidebar.selectbox("Select Quarter", quarters)

    # Query
    connection = get_connection()
    query2 = """
        SELECT State, SUM(User_count) AS Total_Users, SUM(User_amount) AS Total_Amount
        FROM map_transaction
        GROUP BY State
        ORDER BY Total_Amount DESC
        LIMIT 10
    """
    df2 = pd.read_sql(query2, connection)
    connection.close()

    fig_year = px.bar(
        df2,
        x="State",
        y="Total_Amount",
        text="Total_Users",
        title="Year-wise Insurance Uptake (Top 10 States)"
    )
    st.plotly_chart(fig_year, use_container_width=True)

# ---------- PAGE 4: CASE STUDY 3 ----------
elif page == "Case Study 3: State & District Analysis":
    st.title("🌍 Case Study 3: State & District Analysis")

    # Query
    connection = get_connection()
    query3 = """
        SELECT State, District, SUM(User_count) AS Total_Users, SUM(User_amount) AS Total_Amount
        FROM map_transaction
        GROUP BY State, District
        ORDER BY Total_Users DESC
        LIMIT 10
    """
    df3 = pd.read_sql(query3, connection)
    connection.close()

    fig = px.bar(df3, x="District", y="Total_Users", color="State", title="Top 10 Districts by User Count")
    st.plotly_chart(fig, use_container_width=True)

# ---------- PAGE 5: CASE STUDY 4 ----------
elif page == "Case Study 4: Insurance Analysis":
    st.title("📉 Case Study 4: Insurance Analysis")

    connection = get_connection()
    query4 = """
        SELECT State, SUM(User_amount) AS Total_Amount, SUM(User_count) AS Total_Users
        FROM map_insurance
        GROUP BY State
        ORDER BY Total_Amount DESC
        LIMIT 10
    """
    df4 = pd.read_sql(query4, connection)
    connection.close()

    fig = px.bar(df4, x='State', y='Total_Amount', color='Total_Amount',
                 title="Top States by Insurance Amount", height=500)
    st.plotly_chart(fig, use_container_width=True)
    st.dataframe(df4)

# ---------- PAGE 6: CASE STUDY 5 ----------
elif page == "Case Study 5: Device Usage & Engagement":
    st.title("📱 Case Study 5: Device Usage & Engagement")

    connection = get_connection()
    query5 = """
        SELECT State, Brand_type, Registered_count, Percentage_Userdevices
        FROM agg_user
        WHERE Registered_count > 1000
        AND Percentage_Userdevices < 0.1
        ORDER BY Percentage_Userdevices ASC
        LIMIT 10
    """
    df5 = pd.read_sql(query5, connection)
    connection.close()

    fig1 = px.bar(df5, x="Brand_type", y="Percentage_Userdevices",
                  color="State", title="Underutilized Brands by % of User Devices")
    st.plotly_chart(fig1, use_container_width=True)
    st.dataframe(df5)